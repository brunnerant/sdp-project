language: android
jdk:
  - oraclejdk8
android:
  components:
    # The BuildTools version used by your project (make sure it's exactly the same as in the build.gradle)
    # - build-tools-29.0.3
    # Load the android platform tools
    #- platform-tools
    - tools
    # The SDK version used to compile your project
    #- android-29
    # The SDK version used by the system image
    #- android-24
    # The system image, to run an emulator during the tests
    #- sys-img-armeabi-v7a-android-24
before_cache:
  - rm -f  $HOME/.gradle/caches/modules-2/modules-2.lock
  - rm -fr $HOME/.gradle/caches/*/plugin-resolution/
cache:
  directories:
    - $HOME/.m2
    - $HOME/.gradle/caches/
    - $HOME/.gradle/wrapper/
before_script:
  # Check that the code is well formatted. Otherwise, we can exit early
  - ./gradlew spotlessCheck

  # Emulator Management: Create, Start and Wait
  #- echo no | android create avd --force -n test -t android-24 --abi armeabi-v7a
  #- emulator -avd test -no-window -no-boot-anim &
  #- android-wait-for-emulator
  #- adb shell input keyevent 82 &
  - curl -L https://codeclimate.com/downloads/test-reporter/test-reporter-latest-linux-amd64 > ./cc-test-reporter
  - chmod +x ./cc-test-reporter
  - ./cc-test-reporter before-build
script:
  # Launch the android tests and build the test report
  - travis_wait ./gradlew build connectedCheck jacocoTestReport
after_script:
  # Report test coverage to Code Climate
  - export JACOCO_SOURCE_PATH=app/src/main/java/
  - ./cc-test-reporter format-coverage ./app/build/reports/jacoco/jacocoTestReport/jacocoTestReport.xml --input-type jacoco
  - ./cc-test-reporter upload-coverage

env:
  global:
    - ADB_INSTALL_TIMEOUT=8
    - ABI=armeabi-v7a
    - EMU_FLAVOR=default # use google_apis flavor if no default flavor emulator
    # PATH order is incredibly important. e.g. the 'emulator' script exists in more than one place!
    - ANDROID_HOME=/usr/local/android-sdk
    - TOOLS=${ANDROID_HOME}/tools
    - PATH=${ANDROID_HOME}:${ANDROID_HOME}/emulator:${TOOLS}:${TOOLS}/bin:${ANDROID_HOME}/platform-tools:${PATH}
  matrix:
    #- API=15 # only runs locally. Create+Start once from AndroidStudio to init sdcard. Then only from command-line w/-engine classic
   # - API=16 AUDIO=-no-audio
   # - API=17
   # - API=18 # API18 has started being flaky
    #- API=19 # Kernel/emulator mismatch failure probably fixible with -engine classic
    # API 20 was Android Wear only
    #- API=21 ABI=x86_64
    #- API=22 ABI=x86_64
    #- API=23 ABI=x86_64
    - API=24 ABI=x86_64
   # - API=25 ABI=x86_64
    #- API=26 ABI=x86_64 # Fails with unrecognized tests? orchestrator change or something?
   # - API=27 ABI=x86_64
    #- API=28 ABI=x86_64 # Slowness/timing issues / Fails with unresponsive adb command / so unrecognized API for adb
    #- API=Q ABI=x86_64 # Fails I think because of perf + timeouts. 10 minute wait not enough, fixable




#android:
  #components:
    # installing tools to start, then use `sdkmanager` below to get the rest
    #- tools

licenses:
  - 'android-sdk-preview-license-.+'
  - 'android-sdk-license-.+'
  - 'google-gdk-license-.+'

# Emulator Management: Create, Start and Wait
install:
  #- echo 'count=0' > /home/travis/.android/repositories.cfg # Avoid harmless sdkmanager warning
  - echo y | sdkmanager "platform-tools" >/dev/null
  - echo y | sdkmanager "tools" >/dev/null # A second time per Travis docs, gets latest versions
  - echo y | sdkmanager "build-tools;29.0.3" >/dev/null # Implicit gradle dependency - gradle drives changes
  - echo y | sdkmanager "platforms;android-$API" >/dev/null # We need the API of the emulator we will run
  - echo y | sdkmanager "platforms;android-29" >/dev/null # We need the API of the current compileSdkVersion from gradle.properties
  - echo y | sdkmanager --channel=4 "emulator" # Experiment with canary, specifying 28.0.3 (prior version) did not work
  - echo y | sdkmanager "extras;android;m2repository" >/dev/null
  - echo y | sdkmanager "system-images;android-$API;$EMU_FLAVOR;$ABI" #>/dev/null # install our emulator
  - echo no | avdmanager create avd --force -n test -k "system-images;android-$API;$EMU_FLAVOR;$ABI" -c 10M
  - emulator -verbose -avd test -no-accel -no-snapshot -no-window $AUDIO -camera-back none -camera-front none -selinux permissive -qemu -m 2048 &
  - android-wait-for-emulator
  - adb shell input keyevent 82 &

